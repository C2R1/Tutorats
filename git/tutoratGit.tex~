\documentclass[a4paper,10pt]{report}
\usepackage[T1]{fontenc}
\usepackage[utf8]{inputenc}
\usepackage[francais]{babel}
\usepackage{url}
\usepackage{graphicx}
\usepackage{hyperref}
\usepackage{fancyhdr}

\fancyhf{}

\title{Tutorat Git}

\lhead{C2R1}
\chead{Tutorat Git}
\rhead{page \thepage}

\begin{document}
\renewcommand{\chaptername}{Partie}

\begin{titlepage}
\vspace{-3cm}\hspace{-2cm}\includegraphics[scale=0.4]{C2R1}
\begin{center}
\vspace{2cm}
{\fontfamily{phv}\selectfont
\Large{C2R1}\\
\vspace{0.5cm}
\Huge{Tutorat Git}}\\
\end{center}
\begin{flushright}
 \vfill
{\fontfamily{phv}\selectfont
\large{Version du \today}}
\end{flushright}
\end{titlepage}

\pagestyle{fancy}

\tableofcontents
\newpage

\chapter{Introduction}
  \section{Histoire}
    \subsection{Versionnage de code?}
Lorsqu'on travaille \`a plusieurs sur un projet, il est fr\'equent de devoir travailler au m\^eme moment. C'est ce \`a quoi servent les gestionnaires de version. Ils permettent \`a chaque d\'eveloppeur de travailler localement, puis de l'envoyer aux autres d\'eveloppeurs une fois leurs modifications finie.
    \subsection{Outils de versionnage}
Il existe de nombreux outils de versionnage de code. Les 3 plus connus sont sans doute Git, Mercurial et SVN.
      \subsubsection{SVN (subversion)}
Ce fut le plus utilisé pendant longtemps. Développé par la fondation Apache, il s'agit d'une amélioration d'un programme nommé CVS (très peu utilisé aujourd'hui). Le plus gros problème de SVN est qu'il s'agit d'un système centralisé. Un serveur contient donc le code, des clients travaillent dessus. Il n'y a qu'un seul versionning. C'est le gestionnaire de version utilis\'e notamment par Apache, freeBSD et sourceforge.
      \subsubsection{Mercurial}
Contrairement à SVN, il s'agit d'un système décentralisé. Chacun possède son propre \emph{repository} et publie son code sur le \emph{repository} public. Une autre différence avec SVN est qu'il utilise la notion de changeset. C'est à dire qu'il préfère garder en mémoire les changements appliqués que les versions des fichiers. Il est utilis\'e notamment par Mozilla (Firefox, Thunderbird, ...), Facebook, et adblock plus.
      \subsubsection{Git}
Git possède très peu de différences avec Mercurial, mais l'histoire a fait qu'il c'est plus imposé.
C'est en partie grâce à Linus Torvalds qui en a fait la pub et des projets comme github que nous allons utiliser dans le reste du tutorat.
C'est le gestionnaire de version utilis\'e par l'\'equipe de d\'eveloppeurs du noyeau linux.\\

Pour plus d'informations sur les différences entre mercurial et Git, vous pouvez vous référer à ces articles~: \url{http://importantshock.wordpress.com/2008/08/07/git-vs-mercurial/}, \url{http://www.rockstarprogrammer.org/post/2008/apr/06/differences-between-mercurial-and-git/}.
  \section{Installation du client git}
    \subsection{Windows}
Lancez le programme que vous pouvez trouver sur cette page : \url{http://msysgit.github.io} ou \url{http://www.git-scm.com/}
    \subsection{Linux}
\verb|apt-get install git| ou \verb|yum install git| selon la distribution
    \subsection{Mac OS}
\verb|sudo port install git-core +svn +doc +bash_completion +gitweb|
  \section{Choix du serveur git}
Pour la suite de ce tutorat, il vous faut créer un compte github : \url{https://github.com/}.
Vous pouvez aussi vous intéresser à gitlab : \url{https://about.gitlab.com/}

\chapter{Manipulation basique de git}
  \section{D\'ebut du projet}
    \subsection{Cr\'eer le d\'ep\^ot}
Pour cr\'eer le d\'ep\^ot, il faut initialiser un dossier. Ceci se fait avec la commande \verb|git init| (cette \'etape est optionnelle avec github). Ensuite, il faut cr\'eer le d\'ep\^ot sur le serveur.\\
Sur Github, ceci se fait avec un formulaire, accessible en cliquant sur le bouton \emph{create repository}, \`a c\^ot\'e de la liste des d\'ep\^ots d\'ej\`a existants.\\
\begin{figure}[h!]
  \begin{center}
    \includegraphics[scale=0.3]{images/createRepoForm}
    \caption{Formulaire de cr\'eation de d\'ep\^ot}
    \label{creationRepo}
  \end{center}
\end{figure}

Nous avons alors un formulaire de cr\'eation de d\'ep\^ot (cf figure \ref{creationRepo}), qui nous demande~:
\begin{itemize}
 \item le nom du d\'ep\^ot (\emph{Repository name})\\
 \item une description (optionnelle)\\
 \item s'il faut initialiser le d\'ep\^ot (\`a ne pas cocher si vous avez fait \verb|git init|).
\end{itemize}


\subsection{R\'ecup\'erer un d\'ep\^ot existant}
  \section{Premier commit}
     \subsection{pull}
     \subsection{readme}
     Le README est un fichier de présentation du projet. Généralement, on y décrit son installation, les fonctionnalités à venir, comment contribuer, la licence, ...
     \subsection{add/diff/ignore/commit}
\subsubsection{git diff} : montre les changements effectués depuis le dernier commit. Voici la forme d'un fichier diff :
\begin{verbatim}
     diff --git a/apps/system/js/sound_manager.js b/apps/system/js/sound_manager.js
index b796d13..3847b93 100644
--- a/apps/system/js/sound_manager.js
+++ b/apps/system/js/sound_manager.js
@@ -686,7 +686,11 @@
     };
   }
 
-  function setVibrationEnabled(enabled) {
+  function setVibrationEnabled(enabled) {    
+    //vibrate
+    if ('vibrate' in navigator && enabled) {
+      navigator.vibrate([200, 100, 200]);
+    }
     setVibrationEnabledCount++;
     SettingsListener.getSettingsLock().set({
       'vibration.enabled': enabled
\end{verbatim}   
     On y trouve donc le numéro du commit, les fichiers modifiés, les lignes supprimées ainsi que les lignes ajoutées.
     \subsection{push}
  \section{Historique}
\chapter{Manipulation avancée}
  \section{Méthode de développement}
  \section{branch}
     \subsection{créer sa branche}
     Pour créer une branche (et plus généralement pour gérer des branches) il suffit d'utiliser la commande git branch. Une autre méthode plus rapide et d'utiliser git checkout -b nomDeLaBranche qui va se charger de créer la branche et de se placer dessus. Pour se placer sur une branche qui existe, il faut utiliser git checkout nomDeLaBranche.
     \subsection{fusionner}
     Pour fusionner deux branches, il faut utiliser git merge.
     \subsection{résoudre un conflit}
     \subsection{savoir qui a fait quoi}
     Pour savoir qui a fait quoi, il suffit de faire git log. On a alors accès à l'historique. un commit se présente de la forme : 
     "commit n°commit
Author: Auteur <mail>
Date:   Date

    message du commit"
  \section{Supprimer un commit}
  Pour supprimer un commit, il suffit de faire git revert n\no du commit.
Exemple :
\begin{verbatim}
>>git log
"commit c610b4bbc6d631b798f158d2b999f0d0d0e108a4
Author: AmarOk1412 <amarok@enconn.fr>
Date:   Tue Sep 30 09:26:40 2014 +0200

    paragraph git diff + readme + Contribuer à un autre repo

commit 616b3c6843e6aaa42bcf3a6f680760d94dcee57d
Author: TheMrNomis <n0m1s@homnomnom.fr>
Date:   Tue Sep 30 09:23:07 2014 +0200

    titlepage

commit 781c38ff637c10166e6ef28d2574919cb865b7cf
Author: TheMrNomis <n0m1s@homnomnom.fr>
Date:   Tue Sep 30 08:41:26 2014 +0200

    plan du tutorat git

commit 1cd1ccccb53846f9763044da4bf50f26a5aebd10
Author: n0m1s <nomis@nosferapti.(none)>
Date:   Tue Sep 30 08:25:28 2014 +0200

    started git tutorial

commit f1b4c0ebf59da0af7d782303f52bdae86c3d257b
Author: AmarOk1412 <amarok@enconn.fr>
Date:   Mon Sep 29 22:45:53 2014 +0200

    Initial commit
"
git revert f1b4c0ebf59da0af7d782303f52bdae86c3d257b va donc nous supprimer le fichier README qui a été créé pendant ce commit.
\end{verbatim}
  \section{Se positionner sur un commit}
  Pour se placer à un état précis, on utilise la commande git checkout comme pour se placer sur une branche. Il faut donc faire git checkout n\no du commit (git checkout f1b4c0ebf59da0af7d782303f52bdae86c3d257b par exemple) pour se placer sur un commit précis.
  (Schéma + explication du fonctionnement du pointeur HEAD)
  \section{Contribuer à un autre repository}
Généralement, il y a deux possibilités : 
* Contribuer sans coder, (graphisme, traduction, communication, ouverture de bugs)
* Coder
L'ouverture d'issues nécessite de regarder un minimum si l'issue n'a pas déjà été ouverte, de détailler son probleme et de bien regarder la version qu'on utilise.
Pour programmer, il faut forker le dépot et le récupérer en local.
Puis il suffit de créer sa branche, de réaliser les modifications nécessaires.
Quelques fois, il est demandé de créer des tests pour son bout de code.
Avant de proposer il faut vérifier son code (norme, lisibilité, ...)
Enfin il faut push votre travail sur votre fork et effectuer une pull request.
La suite dépend du fonctionnement du projet.
\end{document}
