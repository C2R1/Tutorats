\documentclass[a4paper,10pt]{report}
\usepackage[T1]{fontenc}
\usepackage[utf8]{inputenc}
\usepackage[francais]{babel}
\usepackage{url}
\usepackage{graphicx}
\usepackage{hyperref}
\usepackage{fancyhdr}

\fancyhf{}

\title{Tutorat Git}

\lhead{C2R1}
\chead{Tutorat Git}
\rhead{page \thepage}

\begin{document}
\renewcommand{\chaptername}{Partie}

\begin{titlepage}
\vspace{-3cm}\hspace{-2cm}\includegraphics[scale=0.4]{C2R1}
\begin{center}
\vspace{2cm}
{\fontfamily{phv}\selectfont
\Large{C2R1}\\
\vspace{0.5cm}
\Huge{Tutorat Git}}\\
\end{center}
\begin{flushright}
 \vfill
{\fontfamily{phv}\selectfont
\large{Version du \today}}
\end{flushright}
\end{titlepage}

\pagestyle{fancy}

\tableofcontents
\newpage

\chapter{Introduction}
  \section{Histoire}
    \subsection{Versionnage de code?}
Lorsqu'on travaille \`a plusieurs sur un projet, il est fr\'equent de devoir travailler au m\^eme moment. C'est ce \`a quoi servent les gestionnaires de version. Ils permettent \`a chaque d\'eveloppeur de travailler localement, puis de l'envoyer aux autres d\'eveloppeurs une fois leurs modifications finie.
    \subsection{Outils de versionnage}
Il existe de nombreux outils de versionnage de code. Les 3 plus connus sont sans doute Git, Mercurial et SVN.
      \subsubsection{SVN (subversion)}
Ce fut le plus utilisé pendant longtemps. Développé par la fondation Apache, il s'agit d'une amélioration d'un programme nommé CVS (très peu utilisé aujourd'hui). Le plus gros problème de SVN est qu'il s'agit d'un système centralisé. Un serveur contient donc le code, des clients travaillent dessus. Il n'y a qu'un seul versionning. C'est le gestionnaire de version utilis\'e notamment par Apache, freeBSD et sourceforge.
      \subsubsection{Mercurial}
Contrairement à SVN, il s'agit d'un système décentralisé. Chacun possède son propre \emph{repository} et publie son code sur le \emph{repository} public. Une autre différence avec SVN est qu'il utilise la notion de changeset. C'est à dire qu'il préfère garder en mémoire les changements appliqués que les versions des fichiers. Il est utilis\'e notamment par Mozilla (Firefox, Thunderbird, ...), Facebook, et adblock plus.
      \subsubsection{Git}
Git possède très peu de différences avec Mercurial, mais l'histoire a fait qu'il c'est plus imposé.
C'est en partie grâce à Linus Torvalds qui en a fait la pub et des projets comme github que nous allons utiliser dans le reste du tutorat.
C'est le gestionnaire de version utilis\'e par l'\'equipe de d\'eveloppeurs du noyeau linux.\\

Pour plus d'informations sur les différences entre mercurial et Git, vous pouvez vous référer à ces articles~: \url{http://importantshock.wordpress.com/2008/08/07/git-vs-mercurial/}, \url{http://www.rockstarprogrammer.org/post/2008/apr/06/differences-between-mercurial-and-git/}.
  \section{Installation du client git}
    \subsection{Windows}
Lancez le programme que vous pouvez trouver sur cette page : \url{http://msysgit.github.io} ou \url{http://www.git-scm.com/}
    \subsection{Linux}
\verb|apt-get install git| ou \verb|yum install git| selon la distribution
    \subsection{Mac OS}
\verb|sudo port install git-core +svn +doc +bash_completion +gitweb|
  \section{Choix du serveur git}
Pour la suite de ce tutorat, il vous faut créer un compte github : \url{https://github.com/}.
Vous pouvez aussi vous intéresser à gitlab : \url{https://about.gitlab.com/}

\chapter{Manipulation basique de git}
  \section{D\'ebut du projet}
    \subsection{Cr\'eer le d\'ep\^ot}
Pour cr\'eer le d\'ep\^ot, il faut initialiser un dossier. Ceci se fait avec la commande \verb|git init| (cette \'etape est optionnelle avec github). Ensuite, il faut cr\'eer le d\'ep\^ot sur le serveur.\\
Sur Github, ceci se fait avec un formulaire, accessible en cliquant sur le bouton \emph{create repository}, \`a c\^ot\'e de la liste des d\'ep\^ots d\'ej\`a existants.\\
\begin{figure}[h!]
  \begin{center}
    \includegraphics[scale=0.3]{images/createRepoForm}
    \caption{Formulaire de cr\'eation de d\'ep\^ot}
    \label{creationRepo}
  \end{center}
\end{figure}

Nous avons alors un formulaire de cr\'eation de d\'ep\^ot (cf figure \ref{creationRepo}), qui nous demande~:
\begin{itemize}
 \item le nom du d\'ep\^ot (\emph{Repository name})\\
 \item une description (optionnelle)\\
 \item s'il faut initialiser le d\'ep\^ot (\`a ne pas cocher si vous avez fait \verb|git init|).
\end{itemize}

    \subsection{R\'ecup\'erer un d\'ep\^ot existant}
Pour r\'ecup\'erer un d\'ep\^ot existant, il faut connaitre l'\emph{url} du d\'ep\^ot. Par exemple \url{https://github.com/C2R1/Tutorats.git}. Vous trouverez cette addresse sur la page du d\'ep\^ot sur github, sous le nopm \emph{HTTPS clone URL}.\\

il faut alors aller dans le dossier o\`u l'on veut cloner le d\'ep\^ot, et effectuer la commande \verb|git clone <URL>|.\\
Ainsi, pour notre exemple~: \verb|git clone https://github.com/C2R1/Tutorats.git|.

  \section{Premier commit}
     \subsection{pull}
     \subsection{readme}
     Le README est un fichier de présentation du projet. Généralement, on y décrit son installation, les fonctionnalités à venir, comment contribuer, la licence, ...
     \subsection{add/diff/ignore/commit}
\subsubsection{git diff} : montre les changements effectués depuis le dernier commit. Voici la forme d'un fichier diff :
\begin{verbatim}
     diff --git a/apps/system/js/sound_manager.js b/apps/system/js/sound_manager.js
index b796d13..3847b93 100644
--- a/apps/system/js/sound_manager.js
+++ b/apps/system/js/sound_manager.js
@@ -686,7 +686,11 @@
     };
   }
 
-  function setVibrationEnabled(enabled) {
+  function setVibrationEnabled(enabled) {    
+    //vibrate
+    if ('vibrate' in navigator && enabled) {
+      navigator.vibrate([200, 100, 200]);
+    }
     setVibrationEnabledCount++;
     SettingsListener.getSettingsLock().set({
       'vibration.enabled': enabled
\end{verbatim}   
     On y trouve donc le numéro du commit, les fichiers modifiés, les lignes supprimées ainsi que les lignes ajoutées.
     \subsection{push}
  \section{Historique}
\chapter{Manipulation avancée}
  \section{Méthode de développement}
  \section{branch}
     \subsection{créer sa branche}
     Pour créer une branche (et plus généralement pour gérer des branches) il suffit d'utiliser la commande git branch. Une autre méthode plus rapide et d'utiliser git checkout -b nomDeLaBranche qui va se charger de créer la branche et de se placer dessus. Pour se placer sur une branche qui existe, il faut utiliser git checkout nomDeLaBranche.
     \subsection{fusionner}
     Pour fusionner deux branches, il faut utiliser git merge.
     Exemple : On veut écraser une branche par une autre.
     
     [AmarOk@AmarOkPC repo]$ ls
git  README.md
[AmarOk@AmarOkPC repo]$ git log
commit 5d382e3e4b88dc319296579ee9eb302a7b4efd04
Merge: 860b6b6 b4c4f6c
Author: AmarOk1412 <amarok@enconn.fr>
Date:   Tue Sep 30 13:23:15 2014 +0200

    Merge branch 'master' of https://github.com/C2R1/Tutorats

commit 860b6b69696690e74b3a0188103e8e2bd1652332
Author: AmarOk1412 <amarok@enconn.fr>
Date:   Tue Sep 30 13:22:22 2014 +0200

    branches

commit b4c4f6c17895942e9c301018d9f84f98b63d199f
Merge: 806468b dcf3875
Author: n0m1s <n0m1s@homnomnom.fr>
Date:   Tue Sep 30 13:14:42 2014 +0200

    Merge branch 'master' of https://github.com/C2R1/Tutorats

commit 806468b3f1a513cb60f79ec92c29fd8cd6506e06
Author: n0m1s <n0m1s@homnomnom.fr>
Date:   Tue Sep 30 13:14:23 2014 +0200

    creation et recuperation de depot

commit dcf387590eaf281c10ee7f989a690c223d0b125a
Author: AmarOk1412 <amarok@enconn.fr>
Date:   Tue Sep 30 13:11:15 2014 +0200

    git log

commit 2986c83edc7ca9f1bcbc565fbe13a14091005b1f
Author: n0m1s <n0m1s@homnomnom.fr>
Date:   Tue Sep 30 13:04:14 2014 +0200

    creation du depot

commit 2375f37bc7882de23f25cd254be9eba89cc0e973
Merge: 3ec83b2 afcd4da
Author: n0m1s <n0m1s@homnomnom.fr>
Date:   Tue Sep 30 12:51:49 2014 +0200

    Merge branch 'master' of https://github.com/C2R1/Tutorats

commit 3ec83b24ad6019a5821414afe65cee3f222ce05a
Author: n0m1s <n0m1s@homnomnom.fr>
Date:   Tue Sep 30 12:51:40 2014 +0200

    few changes

commit afcd4da7ef06cdc83586eac5a85cb817f4182907
Author: AmarOk1412 <amarok@enconn.fr>
Date:   Tue Sep 30 12:49:39 2014 +0200

    se positionner sur un commit, en supprimer un

commit 38df27de64b9aa47e6281196bb52337200873b67
Author: n0m1s <n0m1s@homnomnom.fr>
Date:   Tue Sep 30 12:43:47 2014 +0200

    added a few images

commit 2e7b01266285221925af8742d2fd1c5b2be89bb8
Author: n0m1s <n0m1s@homnomnom.fr>
Date:   Tue Sep 30 12:34:07 2014 +0200

    article > report

commit 88eea1524075f0b2744215a7d7a319220ab71877
Author: n0m1s <n0m1s@homnomnom.fr>
Date:   Tue Sep 30 12:24:17 2014 +0200

    plus d'informations

commit 5ca985b47cee5562eed645e07c9b594d6c4101c9
Author: n0m1s <n0m1s@homnomnom.fr>
Date:   Tue Sep 30 11:45:36 2014 +0200

    modificationsd de la partie histoire

commit 7a4f7132dd5cc347d1e73daf3ceae30a3dc80d4b
Merge: f231dee c610b4b
Author: TheMrNomis <n0m1s@homnomnom.fr>
Date:   Tue Sep 30 09:50:41 2014 +0200

    Merge branch 'master' of https://github.com/C2R1/Tutorats
    
    Conflicts:
        git/tutoratGit.tex~

commit f231deec0fac7b370b328446b54dc41fbab5ab19
Author: TheMrNomis <n0m1s@homnomnom.fr>
Date:   Tue Sep 30 09:47:46 2014 +0200

    headers

commit c610b4bbc6d631b798f158d2b999f0d0d0e108a4
Author: AmarOk1412 <amarok@enconn.fr>
Date:   Tue Sep 30 09:26:40 2014 +0200

    paragraph git diff + readme + Contribuer à un autre repo

commit 616b3c6843e6aaa42bcf3a6f680760d94dcee57d
Author: TheMrNomis <n0m1s@homnomnom.fr>
Date:   Tue Sep 30 09:23:07 2014 +0200

    titlepage

commit 781c38ff637c10166e6ef28d2574919cb865b7cf
Author: TheMrNomis <n0m1s@homnomnom.fr>
Date:   Tue Sep 30 08:41:26 2014 +0200

    plan du tutorat git

commit 1cd1ccccb53846f9763044da4bf50f26a5aebd10
Author: n0m1s <nomis@nosferapti.(none)>
Date:   Tue Sep 30 08:25:28 2014 +0200

    started git tutorial

commit f1b4c0ebf59da0af7d782303f52bdae86c3d257b
Author: AmarOk1412 <amarok@enconn.fr>
Date:   Mon Sep 29 22:45:53 2014 +0200

    Initial commit
[AmarOk@AmarOkPC repo]$ git checkout f1b4c0ebf59da0af7d782303f52bdae86c3d257b
Note: checking out 'f1b4c0ebf59da0af7d782303f52bdae86c3d257b'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD est maintenant sur f1b4c0e... Initial commit
[AmarOk@AmarOkPC repo]$ git checkout -b delta
Basculement sur la nouvelle branche 'delta'
[AmarOk@AmarOkPC repo]$ git branch
* delta
  master
[AmarOk@AmarOkPC repo]$ echo someDiff > README.md 
[AmarOk@AmarOkPC repo]$ git commit README.md -m "exemple"
[delta e1e999e] exemple
 1 file changed, 1 insertion(+), 2 deletions(-)
[AmarOk@AmarOkPC repo]$ git merge -s ours master -m "ours attack"
Merge made by the 'ours' strategy.
[AmarOk@AmarOkPC repo]$ git checkout master
Basculement sur la branche 'master'
Votre branche est à jour avec 'origin/master'.
[AmarOk@AmarOkPC repo]$ git merge --no-ff delta 
Suppression de git/tutoratGit.toc
Suppression de git/tutoratGit.tex~
Suppression de git/tutoratGit.tex.backup
Suppression de git/tutoratGit.tex
Suppression de git/tutoratGit.synctex.gz
Suppression de git/tutoratGit.pdf
Suppression de git/tutoratGit.out
Suppression de git/tutoratGit.log
Suppression de git/tutoratGit.aux
Suppression de git/images/createRepoForm.png
Suppression de git/images/createRepo.png
Suppression de git/C2R1.png
Merge made by the 'recursive' strategy.
 README.md                     |   3 +-
 git/C2R1.png                  | Bin 27772 -> 0 bytes
 git/images/createRepo.png     | Bin 5062 -> 0 bytes
 git/images/createRepoForm.png | Bin 41610 -> 0 bytes
 git/tutoratGit.aux            |  67 ------------
 git/tutoratGit.log            | 647 ----------------------------------------------------------------------------------------------------------------
 git/tutoratGit.out            |  29 -----
 git/tutoratGit.pdf            | Bin 245773 -> 0 bytes
 git/tutoratGit.synctex.gz     | Bin 35081 -> 0 bytes
 git/tutoratGit.tex            | 190 ---------------------------------
 git/tutoratGit.tex.backup     | 176 -------------------------------
 git/tutoratGit.tex~           | 185 --------------------------------
 git/tutoratGit.toc            |  34 ------
 13 files changed, 1 insertion(+), 1330 deletions(-)
 delete mode 100644 git/C2R1.png
 delete mode 100644 git/images/createRepo.png
 delete mode 100644 git/images/createRepoForm.png
 delete mode 100644 git/tutoratGit.aux
 delete mode 100644 git/tutoratGit.log
 delete mode 100644 git/tutoratGit.out
 delete mode 100644 git/tutoratGit.pdf
 delete mode 100644 git/tutoratGit.synctex.gz
 delete mode 100644 git/tutoratGit.tex
 delete mode 100644 git/tutoratGit.tex.backup
 delete mode 100644 git/tutoratGit.tex~
 delete mode 100644 git/tutoratGit.toc
[AmarOk@AmarOkPC repo]$ ls
README.md

     \subsection{résoudre un conflit}
     \subsection{savoir qui a fait quoi}
     Pour savoir qui a fait quoi, il suffit de faire git log. On a alors accès à l'historique. un commit se présente de la forme : 
     "commit n°commit
Author: Auteur <mail>
Date:   Date

    message du commit"
  \section{Supprimer un commit}
  Pour supprimer un commit, il suffit de faire git revert n\no du commit.
Exemple :
\begin{verbatim}
>>git log
"commit c610b4bbc6d631b798f158d2b999f0d0d0e108a4
Author: AmarOk1412 <amarok@enconn.fr>
Date:   Tue Sep 30 09:26:40 2014 +0200

    paragraph git diff + readme + Contribuer à un autre repo

commit 616b3c6843e6aaa42bcf3a6f680760d94dcee57d
Author: TheMrNomis <n0m1s@homnomnom.fr>
Date:   Tue Sep 30 09:23:07 2014 +0200

    titlepage

commit 781c38ff637c10166e6ef28d2574919cb865b7cf
Author: TheMrNomis <n0m1s@homnomnom.fr>
Date:   Tue Sep 30 08:41:26 2014 +0200

    plan du tutorat git

commit 1cd1ccccb53846f9763044da4bf50f26a5aebd10
Author: n0m1s <nomis@nosferapti.(none)>
Date:   Tue Sep 30 08:25:28 2014 +0200

    started git tutorial

commit f1b4c0ebf59da0af7d782303f52bdae86c3d257b
Author: AmarOk1412 <amarok@enconn.fr>
Date:   Mon Sep 29 22:45:53 2014 +0200

    Initial commit
"
git revert f1b4c0ebf59da0af7d782303f52bdae86c3d257b va donc nous supprimer le fichier README qui a été créé pendant ce commit.
\end{verbatim}
  \section{Se positionner sur un commit}
  Pour se placer à un état précis, on utilise la commande git checkout comme pour se placer sur une branche. Il faut donc faire git checkout n\no du commit (git checkout f1b4c0ebf59da0af7d782303f52bdae86c3d257b par exemple) pour se placer sur un commit précis.
  (Schéma + explication du fonctionnement du pointeur HEAD)
  \section{Contribuer à un autre repository}
Généralement, il y a deux possibilités : 
* Contribuer sans coder, (graphisme, traduction, communication, ouverture de bugs)
* Coder
L'ouverture d'issues nécessite de regarder un minimum si l'issue n'a pas déjà été ouverte, de détailler son probleme et de bien regarder la version qu'on utilise.
Pour programmer, il faut forker le dépot et le récupérer en local.
Puis il suffit de créer sa branche, de réaliser les modifications nécessaires.
Quelques fois, il est demandé de créer des tests pour son bout de code.
Avant de proposer il faut vérifier son code (norme, lisibilité, ...)
Enfin il faut push votre travail sur votre fork et effectuer une pull request.
La suite dépend du fonctionnement du projet.
\end{document}
